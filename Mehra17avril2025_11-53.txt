import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp 
from scipy.optimize import differential_evolution
from scipy.linalg import expm



# Paramètres
sigma2 = 0.0001
p0 = 0.  # Valeur initiale de p
#mu0 = 150

def M(mu):
    mu = np.squeeze(mu)
    # Définir l'EDO
    def edo(t, p, mu, sigma2):
        return - p * p * (1./sigma2) - 2. * p - 1. / mu
    # Intervalle de temps
    t_span = (0, .5)
    t_eval = np.linspace(t_span[0], t_span[1], 1000000)
    sol = solve_ivp(edo, t_span, [p0], args=(mu, sigma2), t_eval=t_eval)

    # Trouver le moment où p(t) descend en dessous de -60
    t_crit = None
    for i in range(1, len(sol.t)):
        if np.abs(sol.y[0][i]) > 100:
            t_crit = sol.t[i]
            break

    T = t_crit

    A = np.array([[-1, -1/mu],
        [1/sigma2, 1]])

    # Calcul de exp(AT)
    exp_AT = expm(A * T)
    # print("La matrice exp(AT) est :")
    # print(exp_AT)
    # print(np.sqrt(mu*mu/t_crit))
    # Extraire l'élément en bas à gauche (indice [1,0])
    lower_left_value = exp_AT[1, 1]
    return np.abs(lower_left_value)

# Define bounds for mu (adjust as needed)
bounds = [(153, 157)]  # Example bounds: mu between 1 and 200

# Perform differential evolution to minimize M
result = differential_evolution(M, bounds, strategy='best1bin', maxiter=5, popsize=5, tol=0.01, mutation=(0.5, 1), recombination=0.7)

print("Optimization result:")
print(f"Optimal mu: {result.x[0]}")
print(f"Minimum M value: {result.fun}")
